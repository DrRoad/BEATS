names(dfClus)
names(dfClus)[1] = "Input"
one = ggplot(AH, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Arrow Heads dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 3, keyheight = 3),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
theme(legend.background = element_rect(fill="gray92", size=0.5, linetype=1, colour="black"))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=5)", "SAX (a=6)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=5)")), expression(paste("SAX (",alpha,"=6)"))))
AH = df[df$Experiment=="AH",]
AH$Input = factor(AH$Input, levels= c("Raw", "BEATS", "Eigen", "SAX (a=5)", "SAX (a=6)"))
one = ggplot(AH, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Arrow Heads dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 3, keyheight = 3),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
theme(legend.background = element_rect(fill="gray92", size=0.5, linetype=1, colour="black"))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=5)", "SAX (a=6)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=5)")), expression(paste("SAX (",alpha,"=6)"))))
one
names(dfClas)[1] = "Input"
head(dfClas)
dfClas = dfAH[1:3]
dfClus = dfAH[4:6]
names(dfClus)[1] = "Input"
names(dfClas)[1] = "Input"
dfClas$Input
dfAH
dfAH= dfAH[dfAH$segmentationCLA!="Raw",]
dfAH
dfClas = df[1:4]
dfClas = dfAH[1:3]
dfClus = df[c(1,5:7)]
dfClus = dfAH[4:6]
names(dfClus)[2] = "Input"
names(dfClus)[1] = "Input"
names(dfClas)[1] = "Input"
dfClas$Input
names(dfClas)
names(dfClas) = c("Input", "Model", "Accuracy")
one = ggplot(dfClas, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Arrow Heads dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 3, keyheight = 3),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))
oe
one
one = ggplot(dfClas, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Arrow Heads dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 3, keyheight = 3),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))
+
theme(legend.background = element_rect(fill="gray92", size=0.5, linetype=1, colour="black"))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=10)", "SAX (a=6)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=10)")), expression(paste("SAX (",alpha,"=6)"))))
one = ggplot(dfClas, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Arrow Heads dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 3, keyheight = 3),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
theme(legend.background = element_rect(fill="gray92", size=0.5, linetype=1, colour="black"))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=10)", "SAX (a=6)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=10)")), expression(paste("SAX (",alpha,"=6)"))))
one
file_names=as.list(dir("resutls_models"))
lapply(paste0("resutls_models/",file_names),load,.GlobalEnv)
accuraciesSAXrf = as.numeric(as.character(lapply(gsSAXrf_all, "[[",1)))
gsAlpharf = which.max(accuraciesSAXrf)
gsSAX1rf = accuraciesSAXrf[which.max(accuraciesSAXrf)]
accuraciesSAXsvm = as.numeric(as.character(lapply(gsSAXsvm_all, "[[",1)))
gsAlphasvm = which.max(accuraciesSAXsvm)
gsSAX1svm = accuraciesSAXsvm[which.max(accuraciesSAXsvm)]
gsSAX2rf = accuraciesSAXrf[gsAlphasvm]
gsSAX2svm = accuraciesSAXsvm[gsAlpharf]
gsAlphahclust = which.max(gsSAXhclust_all) # Alpha for best silhouette of hclust with SAX: 6
gsSAX1hclust = gsSAXhclust_all[gsAlphahclust] # Best silhouette of hclust with SAX inputs: 0.51
gsAlphaskmeans = which( gsSAXkmeans_all == max(gsSAXkmeans_all, na.rm=T) ) # In case that is the same alfa than previoulsy
ifelse(gsAlphahclust %in% gsAlphaskmeans, gsAlphakmeans <- gsAlphahclust, gsAlphakmeans <- gsAlphaskmeans[1])  # Alpha for best silhouette of kmeans with SAX: 8
gsSAX1kmeans = gsSAXkmeans_all[gsAlphakmeans] # Best silhouette of hclust with SAX inputs: 0.42
gsSAX2hclust = gsSAXhclust_all[gsAlphakmeans] # One accuracy of hclust with SAX (best alfa for kmeans) inputs: 0.426
gsSAX2kmeans = gsSAXkmeans_all[gsAlphahclust] # One accuracy of kmeans with SAX (best alfa for hclust) inputs: 0.44
segmentationCLA = c("BEATS", "BEATS",
paste0("SAX (a=",gsAlpharf, ")"),paste0("SAX (a=",gsAlpharf, ")"),
paste0("SAX (a=",gsAlphasvm, ")"),paste0("SAX (a=",gsAlphasvm, ")"),
"Eigen", "Eigen", "Raw", "Raw")
model = c("RF", "SVM", "RF", "SVM", "RF", "SVM", "RF", "SVM", "RF", "SVM")
accuracy = unlist(c(gsBEATSrf[[1]],gsBEATSsvm[[1]], gsSAX1rf,gsSAX2svm, gsSAX2rf,gsSAX1svm,
gsEigenrf[[1]],gsEigensvm[[1]], gsRawrf[[1]], gsRawsvm[[1]]))
segmentationCLU = c("BEATS", "BEATS",
paste0("SAX (a=",gsAlphahclust, ")"), paste0("SAX (a=",gsAlphahclust, ")"),
paste0("SAX (a=",gsAlphakmeans, ")"), paste0("SAX (a=",gsAlphakmeans, ")"),
"Eigen", "Eigen", "Raw", "Raw")
method= c("Hclust", "Kmeans", "Hclust", "Kmeans", "Hclust", "Kmeans", "Hclust", "Kmeans", "Hclust", "Kmeans")
silhouette = c(gsBEATShclust, gsBEATSkmeans, gsSAX1hclust, gsSAX2kmeans,gsSAX2hclust,
gsSAX1kmeans, gsEigenhclust, gsEigenkmeans, gsRawhclust, gsRawkmeans)
dfGS = data.frame(segmentationCLA, model, accuracy,segmentationCLU, method, silhouette)
source("gasSensors_results.R")
dfClas = dfGS[1:3]
names(dfClas) = c("Input", "Model", "Accuracy")
dfClas$Input
dfClas = dfGS[1:3]
names(dfClas) = c("Input", "Model", "Accuracy")
three = ggplot(dfClas, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Gas Sensors dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))  +
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=7)", "SAX (a=8)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=7)")), expression(paste("SAX (",alpha,"=8)"))))
three
dfGS= dfGS[dfAH$segmentationCLA!="Raw",]
dfClas = dfGS[1:3]
names(dfClas) = c("Input", "Model", "Accuracy")
three = ggplot(dfClas, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Gas Sensors dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))  +
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=7)", "SAX (a=8)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=7)")), expression(paste("SAX (",alpha,"=8)"))))
three
dfGS
dfGS= dfGS[dfGS$segmentationCLA!="Raw",]
dfClas = dfGS[1:3]
names(dfClas) = c("Input", "Model", "Accuracy")
three = ggplot(dfClas, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Gas Sensors dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))  +
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=7)", "SAX (a=8)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=7)")), expression(paste("SAX (",alpha,"=8)"))))
three
file_names=as.list(dir("resutls_models"))
lapply(paste0("resutls_models/",file_names),load,.GlobalEnv)
accuraciesSAXrf = as.numeric(as.character(lapply(rgSAXrf_all, "[[",1)))
rgAlpharf = which.max(accuraciesSAXrf)
rgSAX1rf = accuraciesSAXrf[which.max(accuraciesSAXrf)]
accuraciesSAXsvm = as.numeric(as.character(lapply(rgSAXsvm_all, "[[",1)))
rgAlphasvm = which.max(accuraciesSAXsvm)
rgSAX1svm = accuraciesSAXsvm[which.max(accuraciesSAXsvm)]
rgSAX2rf = accuraciesSAXrf[rgAlphasvm]
rgSAX2svm = accuraciesSAXsvm[rgAlpharf]
rgAlphahclust = which.max(rgSAXhclust_all) # Alpha for best silhouette of hclust with SAX: 6
rgSAX1hclust = rgSAXhclust_all[rgAlphahclust] # Best silhouette of hclust with SAX inputs: 0.51
rgAlphakmeans = which.max(rgSAXkmeans_all) # Alpha for best silhouette of kmeans with SAX: 8
rgSAX1kmeans = rgSAXkmeans_all[rgAlphakmeans] # Best silhouette of hclust with SAX inputs: 0.42
rgSAX2hclust = rgSAXhclust_all[rgAlphakmeans] # One accuracy of hclust with SAX (best alfa for kmeans) inputs: 0.426
rgSAX2kmeans = rgSAXkmeans_all[rgAlphahclust] # One accuracy of kmeans with SAX (best alfa for hclust) inputs: 0.44
segmentationCLA = c("BEATS", "BEATS",
paste0("SAX (a=",rgAlpharf, ")"),paste0("SAX (a=",rgAlpharf, ")"),
paste0("SAX (a=",rgAlphasvm, ")"),paste0("SAX (a=",rgAlphasvm, ")"),
"Eigen", "Eigen", "Raw", "Raw")
model = c("RF", "SVM", "RF", "SVM", "RF", "SVM", "RF", "SVM", "RF", "SVM")
accuracy = unlist(c(rgBEATSrf[[1]],rgBEATSsvm[[1]], rgSAX1rf,rgSAX2svm, rgSAX2rf,rgSAX1svm,
rgEigenrf[[1]],rgEigensvm[[1]], rgRawrf[[1]], rgRawsvm[[1]]))
segmentationCLU = c("BEATS", "BEATS",
paste0("SAX (a=",rgAlphahclust, ")"), paste0("SAX (a=",rgAlphahclust, ")"),
paste0("SAX (a=",rgAlphakmeans, ")"), paste0("SAX (a=",rgAlphakmeans, ")"),
"Eigen", "Eigen", "Raw", "Raw")
method= c("Hclust", "Kmeans", "Hclust", "Kmeans", "Hclust", "Kmeans", "Hclust", "Kmeans", "Hclust", "Kmeans")
silhouette = c(rgBEATShclust, rgBEATSkmeans, rgSAX1hclust, rgSAX2kmeans,rgSAX2hclust,
rgSAX1kmeans, rgEigenhclust, rgEigenkmeans, rgRawhclust, rgRawkmeans)
dfRG = data.frame(segmentationCLA, model, accuracy,segmentationCLU, method, silhouette)
source("randomGenerator_results.R")
dfClas = dfRG[1:3]
names(dfClas) = c("Input", "Model", "Accuracy")
dfClas$Input
source("arrowHeads_results.R")
source("gasSensors_results.R")
source("randomGenerator_results.R")
dfAH= dfAH[dfAH$segmentationCLA!="Raw",]
dfGS= dfGS[dfGS$segmentationCLA!="Raw",]
dfRG= dfRG[dfRG$segmentationCLA!="Raw",]
# ONE
dfClas = dfAH[1:3]
names(dfClas) = c("Input", "Model", "Accuracy")
one = ggplot(dfClas, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Arrow Heads dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 3, keyheight = 3),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
theme(legend.background = element_rect(fill="gray92", size=0.5, linetype=1, colour="black"))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=10)", "SAX (a=6)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=10)")), expression(paste("SAX (",alpha,"=6)"))))
dfClas = dfRG[1:3]
names(dfClas) = c("Input", "Model", "Accuracy")
two = ggplot(dfClas, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Random LHS Generator dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1)) +
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=4)", "SAX (a=5)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=4)")), expression(paste("SAX (",alpha,"=5)"))))
dfClas = dfGS[1:3]
names(dfClas) = c("Input", "Model", "Accuracy")
three = ggplot(dfClas, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Gas Sensors dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))  +
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=7)", "SAX (a=8)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=7)")), expression(paste("SAX (",alpha,"=8)"))))
pdf(file = "figures/classification8F.pdf", width = 15.3, height = 3.7)
grid_arrange_shared_legend(one, three, two, nrow = 1, ncol = 3)
dev.off()
library(ggplot2)
library(cowplot)
library(gridExtra)
library(grid)
grid_arrange_shared_legend <- function(..., nrow = 1, ncol = length(list(...)), position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position = "none"))
gl <- c(gl, nrow = nrow, ncol = ncol)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
source("arrowHeads_results.R")
source("gasSensors_results.R")
source("randomGenerator_results.R")
dfAH= dfAH[dfAH$segmentationCLA!="Raw",]
dfGS= dfGS[dfGS$segmentationCLA!="Raw",]
dfRG= dfRG[dfRG$segmentationCLA!="Raw",]
# ONE
dfClas = dfAH[1:3]
names(dfClas) = c("Input", "Model", "Accuracy")
one = ggplot(dfClas, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Arrow Heads dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 3, keyheight = 3),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
theme(legend.background = element_rect(fill="gray92", size=0.5, linetype=1, colour="black"))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=10)", "SAX (a=6)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=10)")), expression(paste("SAX (",alpha,"=6)"))))
dfClas = dfRG[1:3]
names(dfClas) = c("Input", "Model", "Accuracy")
two = ggplot(dfClas, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Random LHS Generator dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1)) +
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=4)", "SAX (a=5)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=4)")), expression(paste("SAX (",alpha,"=5)"))))
dfClas = dfGS[1:3]
names(dfClas) = c("Input", "Model", "Accuracy")
three = ggplot(dfClas, aes(x=Input, y=Accuracy)) +
geom_line(aes(colour=Model, group=Model, linetype=Model),size=1) +
geom_point(aes(colour=Model, shape = Model),
size=3) + ggtitle("Gas Sensors dataset")  +
scale_linetype_manual("Model",values=c("RF"=1,"SVM"=2)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))  +
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=7)", "SAX (a=8)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=7)")), expression(paste("SAX (",alpha,"=8)"))))
pdf(file = "figures/classification8F.pdf", width = 15.3, height = 3.7)
grid_arrange_shared_legend(one, three, two, nrow = 1, ncol = 3)
dev.off()
grid_arrange_shared_legend(one, three, two, nrow = 1, ncol = 3)
dfClus = dfAH[4:6]
dfClus
names(dfClus) = c("Input", "Method", "Silhouette")
dfClus$Input
dfClus = dfAH[4:6]
names(dfClus) = c("Input", "Method", "Silhouette")
one = ggplot(AH, aes(x=Input, y=Silhouette)) +
geom_line(aes(colour=Method, group=Method, linetype=Method),size=1) +
geom_point(aes(colour=Method, shape = Method),
size=3) + ggtitle("Arrow Heads dataset")  +
# scale_linetype_manual("Method",values=c("hclust"=1,"kmeans"=2)) +
guides(fill = guide_legend(keywidth = 3, keyheight = 3),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
theme(legend.background = element_rect(fill="gray92", size=0.5, linetype=1, colour="black"))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=5)", "SAX (a=6)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=5)")), expression(paste("SAX (",alpha,"=6)"))))
one
dfAH
one = ggplot(dfClus, aes(x=Input, y=Silhouette)) +
geom_line(aes(colour=Method, group=Method, linetype=Method),size=1) +
geom_point(aes(colour=Method, shape = Method),
size=3) + ggtitle("Arrow Heads dataset")  +
# scale_linetype_manual("Method",values=c("hclust"=1,"kmeans"=2)) +
guides(fill = guide_legend(keywidth = 3, keyheight = 3),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
theme(legend.background = element_rect(fill="gray92", size=0.5, linetype=1, colour="black"))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=5)", "SAX (a=6)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=5)")), expression(paste("SAX (",alpha,"=6)"))))
dfClus
one = ggplot(dfClus, aes(x=Input, y=Silhouette)) +
geom_line(aes(colour=Method, group=Method, linetype=Method),size=1) +
geom_point(aes(colour=Method, shape = Method),
size=3) + ggtitle("Arrow Heads dataset")  +
# scale_linetype_manual("Method",values=c("hclust"=1,"kmeans"=2)) +
guides(fill = guide_legend(keywidth = 3, keyheight = 3),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
theme(legend.background = element_rect(fill="gray92", size=0.5, linetype=1, colour="black"))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=5)", "SAX (a=6)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=5)")), expression(paste("SAX (",alpha,"=6)"))))
one
dfClus = dfRG[4:6]
names(dfClus) = c("Input", "Method", "Silhouette")
dfClus$Input
dfClus = dfRG[4:6]
names(dfClus) = c("Input", "Method", "Silhouette")
two = ggplot(dfClus, aes(x=Input, y=Silhouette)) +
geom_line(aes(colour=Method, group=Method, linetype=Method),size=1) +
geom_point(aes(colour=Method, shape = Method),
size=3) + ggtitle("LHS generator dataset")  +
#  scale_linetype_manual("Method",values=c("rf"=1,"svm"=2)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=3)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=3)"))))
two
dfClus = dfGS[4:6]
names(dfClus) = c("Input", "Method", "Silhouette")
dfClus = dfGS[4:6]
names(dfClus) = c("Input", "Method", "Silhouette")
dfClus$Input
three = ggplot(dfClus, aes(x=Input, y=Silhouette)) +
geom_line(aes(colour=Method, group=Method, linetype=Method),size=1) +
geom_point(aes(colour=Method, shape = Method),
size=3) + ggtitle("Gas Sensors dataset")  +
#  scale_linetype_manual("Method",values=c("rf"=1,"svm"=2)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen","SAX (a=8)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=8)"))))
three
pdf(file = "figures/clustering8F.pdf", width = 15.3, height = 3.7)
grid_arrange_shared_legend(one, three, two, nrow = 1, ncol = 3)
dev.off()
getwd()
source("arrowHeads_results.R")
source("gasSensors_results.R")
source("randomGenerator_results.R")
dfAH
dfGS
dfRG
smokers  <- c( 83, 90 )
patients <- c( 86, 93 )
prop.test(smokers, patients)
file_names=as.list(dir("resutls_models"))
lapply(paste0("resutls_models/",file_names),load,.GlobalEnv)
accuraciesSAXrf = as.numeric(as.character(lapply(arrhSAXrf_all, "[[",1)))
arrhAlpharf = which.max(accuraciesSAXrf)
arrhSAX1rf = accuraciesSAXrf[which.max(accuraciesSAXrf)]
accuraciesSAXsvm = as.numeric(as.character(lapply(arrhSAXsvm_all, "[[",1)))
arrhAlphasvm = which.max(accuraciesSAXsvm)
arrhSAX1svm = accuraciesSAXsvm[which.max(accuraciesSAXsvm)]
arrhSAX2rf = accuraciesSAXrf[arrhAlphasvm]
arrhSAX2svm = accuraciesSAXsvm[arrhAlpharf]
arrhAlphahclust = which.max(arrhSAXhclust_all) # Alpha for best silhouette of hclust with SAX: 6
arrhSAX1hclust = arrhSAXhclust_all[arrhAlphahclust] # Best silhouette of hclust with SAX inputs: 0.51
arrhAlphakmeans = which.max(arrhSAXkmeans_all) # Alpha for best silhouette of kmeans with SAX: 8
arrhSAX1kmeans = arrhSAXkmeans_all[arrhAlphakmeans] # Best silhouette of hclust with SAX inputs: 0.42
arrhSAX2hclust = arrhSAXhclust_all[arrhAlphakmeans] # One accuracy of hclust with SAX (best alfa for kmeans) inputs: 0.426
arrhSAX2kmeans = arrhSAXkmeans_all[arrhAlphahclust] # One accuracy of kmeans with SAX (best alfa for hclust) inputs: 0.44
arrhBEATSrf
arrhBEATSsvm[
arrhBEATSsvm
acc = c(39,40)
per = c(52,52)
prop.test(acc, per)
arrhBEATSrf
arrhSAX1rf
arrhSAXrf_all
arrhAlpharf
acc = c(39,41)
per = c(52,52)
prop.test(acc, per)
arrhBEATSsvm
accuraciesSAXsvm
arrhAlphasvm
arrhSAXsvm_all
acc = c(40,44)
per = c(52,52)
prop.test(acc, per)
gsBEATSrf
accuraciesSAXrf = as.numeric(as.character(lapply(rgSAXrf_all, "[[",1)))
rgAlpharf = which.max(accuraciesSAXrf)
rgAlpharf
accuraciesSAXrf
rgSAXrf_all
file_names=as.list(dir("resutls_models"))
lapply(paste0("resutls_models/",file_names),load,.GlobalEnv)
accuraciesSAXrf = as.numeric(as.character(lapply(gsSAXrf_all, "[[",1)))
gsAlpharf = which.max(accuraciesSAXrf)
gsSAX1rf = accuraciesSAXrf[which.max(accuraciesSAXrf)]
gsAlpharf
gsSAXrf_all
gsBEATSrf
acc = c(104,84)
per = c(110,108)
prop.test(acc, per)
gsBEATSsvm
accuraciesSAXsvm = as.numeric(as.character(lapply(gsSAXsvm_all, "[[",1)))
gsAlphasvm = which.max(accuraciesSAXsvm)
gsSAX1svm = accuraciesSAXsvm[which.max(accuraciesSAXsvm)]
gsAlphasvm
gsSAXsvm_all
acc = c(95,84)
per = c(110,108)
prop.test(acc, per)
rgBEATSrf
accuraciesSAXrf = as.numeric(as.character(lapply(rgSAXrf_all, "[[",1)))
rgAlpharf = which.max(accuraciesSAXrf)
rgSAX1rf = accuraciesSAXrf[which.max(accuraciesSAXrf)]
rgAlpharf
rgSAXrf_all
acc = c(50,36)
per = c(75,75)
prop.test(acc, per)
rgBEATSsvm
rgSAXsvm_all
accuraciesSAXsvm = as.numeric(as.character(lapply(rgSAXsvm_all, "[[",1)))
rgAlphasvm = which.max(accuraciesSAXsvm)
rgSAX1svm = accuraciesSAXsvm[which.max(accuraciesSAXsvm)]
rgAlphasvm
acc = c(55,36)
per = c(75,75)
prop.test(acc, per)
source("functions-ii.R")
source("functions-ii.R")
df <- rbind(read.table("../data/ArrowHead/ArrowHead_TEST", sep=","),read.table("../data/ArrowHead/ArrowHead_TRAIN", sep=","))
df
df <- rbind(read.table("data/ArrowHead/ArrowHead_TEST", sep=","),read.table("../data/ArrowHead/ArrowHead_TRAIN", sep=","))
df <- rbind(read.table("./data/ArrowHead/ArrowHead_TEST", sep=","),read.table("../data/ArrowHead/ArrowHead_TRAIN", sep=","))
df <- rbind(read.table("../data/ArrowHead/ArrowHead_TEST", sep=","),read.table("../data/ArrowHead/ArrowHead_TRAIN", sep=","))
names(df)[1] = "classId"
classId <- as.factor(df$classId)
dfSC2 = df[1:193]
dfSC = dfSC2[,-1]
set.seed(seed)
arrh = dfSC2
file_names=as.list(dir("resutls_models"))
source("functions-ii.R")
#########
## RANDOMLY GENERATED LHS
# Preparing the data:
df1 = read.table("../data/driftdataset/batch1-i.dat", sep=";", head=F, stringsAsFactors = F)
classId = c(rep(1,29), rep(2,27))
setwd("~/Git_repos/BEATS/experiments_BEATS")
df1 = read.table("../data/random_LHS_generator_drift/100_gauss", sep=",", head=F)
df2 = read.table("../data/random_LHS_generator_drift/100_expo", sep=",", head=F)
df3 = read.table("../data/random_LHS_generator_drift/100_triang", sep=",", head=F)
head(df1)
(rep(1,100), rep(2, 100), rep(3, 100))
(rep(1,100), rep(2, 100), rep(3, 100))
classId = c(rep(1,100), rep(2, 100), rep(3, 100))
dfx = rbind(t(df1[-c(ncol(df1))]), t(df2[-c(ncol(df2))]), t(df3[-c(ncol(df3))]))
head(dfx)
