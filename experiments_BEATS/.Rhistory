lists[[i]] = clInic
}
while (T) {
for(i in 1:length(lists)){
lists[[i]] = clInic
}
for(m in 1:nrow(df)){
smallest_distance = getDist(df[m,],f.centroid(clusters[[1]]))
index = 1
for (i in 1:(length(clusters)-1)){
distance = getDist(df[m,], f.centroid(clusters[[i+1]]))
if (distance < smallest_distance){
smallest_distance = distance
index = i+1
}
}
lists[[index]] = rbind(lists[[index]], df[m,])
}
biggest_shift = 0.0
for (l in 1:length(clusters)){
shift = getDist(f.centroid(clusters[[l]]), f.centroid(lists[[l]]))
clusters[[l]] = lists[[l]]
biggest_shift = max(biggest_shift, shift)
}
if(biggest_shift < cutoff){
break
}
}
nrow(clusters[[1]]) + nrow(clusters[[2]]) + nrow(clusters[[3]])
as.numeric(rownames(clusters[[1]]))
as.numeric(rownames(clusters[[2]]))
as.numeric(rownames(clusters[[3]]))
for(i in 1:length(clusters)){
clusters[[i]] = data.frame(clusters[[i]], class = rep(i,nrow(clusters[[i]])), id = as.numeric(rownames(clusters[[i]])))
}
library("plyr")
df <- ldply(clusters, data.frame)
df = df[order(df$id),]
table(df$class)
df$class
set.seed(seed)
cl =  kmeans(data, centers = 3)
table(cl$cl)
cl$cl
my_kmeans = function(df, centers, cutoff, seed= 1234){
library("plyr")
my_kmeans = function(df, centers, cutoff, seed= 1234){
set.seed(seed)
initial = df[sample(nrow(df), centers), ]
clusters = list()
for(i in 1:nrow(initial)){
clusters[[i]] = initial[i,]
}
clusters
lists <- vector("list", length(clusters))
clInic = clusters[[i]][-1,]
for(i in 1:length(lists)){
lists[[i]] = clInic
}
while (T) {
for(i in 1:length(lists)){
lists[[i]] = clInic
}
for(m in 1:nrow(df)){
smallest_distance = getDist(df[m,],f.centroid(clusters[[1]]))
index = 1
for (i in 1:(length(clusters)-1)){
distance = getDist(df[m,], f.centroid(clusters[[i+1]]))
if (distance < smallest_distance){
smallest_distance = distance
index = i+1
}
}
lists[[index]] = rbind(lists[[index]], df[m,])
}
biggest_shift = 0.0
for (l in 1:length(clusters)){
shift = getDist(f.centroid(clusters[[l]]), f.centroid(lists[[l]]))
clusters[[l]] = lists[[l]]
biggest_shift = max(biggest_shift, shift)
}
if(biggest_shift < cutoff){
break
}
}
nrow(clusters[[1]]) + nrow(clusters[[2]]) + nrow(clusters[[3]])
as.numeric(rownames(clusters[[1]]))
as.numeric(rownames(clusters[[2]]))
as.numeric(rownames(clusters[[3]]))
for(i in 1:length(clusters)){
clusters[[i]] = data.frame(clusters[[i]], class = rep(i,nrow(clusters[[i]])), id = as.numeric(rownames(clusters[[i]])))
}
df <- ldply(clusters, data.frame)
df = df[order(df$id),]
table(df$class)
return(df$class)
}
seed = 1234
df = iris.data
centers = 3
cutoff = 0.0005
my_kmeans(df, centers, cutoff, seed)
library("plyr")
my_kmeans = function(df, centers, cutoff, seed= 1234){
set.seed(seed)
initial = df[sample(nrow(df), centers), ]
clusters = list()
for(i in 1:nrow(initial)){
clusters[[i]] = initial[i,]
}
clusters
lists <- vector("list", length(clusters))
clInic = clusters[[i]][-1,]
for(i in 1:length(lists)){
lists[[i]] = clInic
}
while (T) {
for(i in 1:length(lists)){
lists[[i]] = clInic
}
for(m in 1:nrow(df)){
smallest_distance = getDist(df[m,],f.centroid(clusters[[1]]))
index = 1
for (i in 1:(length(clusters)-1)){
distance = getDist(df[m,], f.centroid(clusters[[i+1]]))
if (distance < smallest_distance){
smallest_distance = distance
index = i+1
}
}
lists[[index]] = rbind(lists[[index]], df[m,])
}
biggest_shift = 0.0
for (l in 1:length(clusters)){
shift = getDist(f.centroid(clusters[[l]]), f.centroid(lists[[l]]))
clusters[[l]] = lists[[l]]
biggest_shift = max(biggest_shift, shift)
}
if(biggest_shift < cutoff){
break
}
}
nrow(clusters[[1]]) + nrow(clusters[[2]]) + nrow(clusters[[3]])
as.numeric(rownames(clusters[[1]]))
as.numeric(rownames(clusters[[2]]))
as.numeric(rownames(clusters[[3]]))
for(i in 1:length(clusters)){
clusters[[i]] = data.frame(clusters[[i]], class = rep(i,nrow(clusters[[i]])), id = as.numeric(rownames(clusters[[i]])))
}
df <- ldply(clusters, data.frame)
df = df[order(df$id),]
table(df$class)
return(df$class)
}
seed = 1234
df = iris.data
centers = 3
cutoff = 0.0005
my_kmeans(df, centers, cutoff, seed)
seed = 1234
df = iris[-5]
centers = 3
cutoff = 0.0005
my_kmeans(df, centers, cutoff, seed)
f.centroid = function(clusterdf){
return(colMeans(clusterdf))
}
getDist = function(x,y, dist = "Eucl"){
d=0
if(dist == "Eucl"){
d = dist(rbind(x,y))
}
return(as.numeric(d))
}
my_kmeans(df, centers, cutoff, seed)
f.centroid = function(clusterdf){
return(colMeans(clusterdf))
}
getDist = function(x,y, dist = "Eucl"){
d=0
if(dist == "Eucl"){
d = dist(rbind(x,y))
}
return(as.numeric(d))
}
library("plyr")
my_kmeans = function(df, centers, cutoff, seed= 1234){
set.seed(seed)
initial = df[sample(nrow(df), centers), ]
clusters = list()
for(i in 1:nrow(initial)){
clusters[[i]] = initial[i,]
}
clusters
lists <- vector("list", length(clusters))
clInic = clusters[[i]][-1,]
for(i in 1:length(lists)){
lists[[i]] = clInic
}
while (T) {
for(i in 1:length(lists)){
lists[[i]] = clInic
}
for(m in 1:nrow(df)){
smallest_distance = getDist(df[m,],f.centroid(clusters[[1]]))
index = 1
for (i in 1:(length(clusters)-1)){
distance = getDist(df[m,], f.centroid(clusters[[i+1]]))
if (distance < smallest_distance){
smallest_distance = distance
index = i+1
}
}
lists[[index]] = rbind(lists[[index]], df[m,])
}
biggest_shift = 0.0
for (l in 1:length(clusters)){
shift = getDist(f.centroid(clusters[[l]]), f.centroid(lists[[l]]))
clusters[[l]] = lists[[l]]
biggest_shift = max(biggest_shift, shift)
}
if(biggest_shift < cutoff){
break
}
}
nrow(clusters[[1]]) + nrow(clusters[[2]]) + nrow(clusters[[3]])
as.numeric(rownames(clusters[[1]]))
as.numeric(rownames(clusters[[2]]))
as.numeric(rownames(clusters[[3]]))
for(i in 1:length(clusters)){
clusters[[i]] = data.frame(clusters[[i]], class = rep(i,nrow(clusters[[i]])), id = as.numeric(rownames(clusters[[i]])))
}
df <- ldply(clusters, data.frame)
df = df[order(df$id),]
table(df$class)
return(df$class)
}
seed = 1234
df = iris[-5]
centers = 3
cutoff = 0.0005
my_kmeans(df, centers, cutoff, seed)
library("cluster")
?silhouette
acc = c(39,37)
per = c(52,52)
prop.test(acc, per)
prop.test(2,52)
wilcox.test(immer$Y1, immer$Y2, paired=TRUE)
3/64
64/3
100*3
300/64
20*64/100
6100/64
64*2
95*128
95*128/100
128-122
81-67
75*16971*2/100
16971*2-25456
1409*6
source("functions-ii.R")
##### HCLUST #####
library("proxy")
library(car)
library(rgl)
library("factoextra")
library("RColorBrewer")
library("ggplot2")
colors = brewer.pal(n=8,name="Set1")
df = read.table("../data/Citypulse/trafficData158446.csv", sep=",", head=T)
previous = Sys.time()
sc = df$vehicleCount
beats1 = t(f.BEATS(t(sc), sl=12))
sc = df$avgSpeed
beats2 = t(f.BEATS(t(sc), sl=12))
now = previous-Sys.time() ### 0.25 seconds
now
previous = Sys.time()
sc = df$vehicleCount
beats1 = t(f.BEATS(t(sc), sl=12))
sc = df$avgSpeed
beats2 = t(f.BEATS(t(sc), sl=12))
now = previous-Sys.time() ### 0.25 seconds
now
previous = Sys.time()
sc = df$vehicleCount
beats1 = t(f.BEATS(t(sc), sl=12))
sc = df$avgSpeed
beats2 = t(f.BEATS(t(sc), sl=12))
beatsM1 = matrix(beats1,ncol = 3, byrow = T)
beatsM2 = matrix(beats2,ncol = 3, byrow = T)
beatsM = data.frame(as.data.frame(beatsM1), as.data.frame(beatsM2))
now = previous-Sys.time() ### nothing
now
RStudio.Version()
RStudio.Version()
x = c(NA,NA, NA,1,2,5,4,3)
which(max(x))
max(x)
max(x, na.rm=T)
which(max(x, na.rm=T))
which.max(x, na.rm=T)
which.max(x)
which.max(x)
x[which.max(x)]
?which.max
.Random.seed
getOption("myseed")
getOption("myseed")
Mod()
?Mod
76-44
94-77
86-78
66-48
73-48
0.81-0.46
0.48-0.17
0.65-0
setwd("~/Git_repos/postgrado/doctorado/estancias/Surrey/job/SAX")
library(ggplot2)
library(cowplot)
library(gridExtra)
library(grid)
grid_arrange_shared_legend <- function(..., nrow = 1, ncol = length(list(...)), position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position = "none"))
gl <- c(gl, nrow = nrow, ncol = ncol)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
source("arrowHeads_results.R")
source("gasSensors_results.R")
source("randomGenerator_results.R")
dfAH= dfAH[dfAH$segmentationCLA!="Raw",]
dfGS= dfGS[dfGS$segmentationCLA!="Raw",]
dfRG= dfRG[dfRG$segmentationCLA!="Raw",]
setwd("~/Git_repos/postgrado/doctorado/estancias/Surrey/job/SAX")
library(ggplot2)
library(cowplot)
library(gridExtra)
library(grid)
grid_arrange_shared_legend <- function(..., nrow = 1, ncol = length(list(...)), position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position = "none"))
gl <- c(gl, nrow = nrow, ncol = ncol)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
source("arrowHeads_results.R")
source("gasSensors_results.R")
source("randomGenerator_results.R")
dfAH= dfAH[dfAH$segmentationCLA!="Raw",]
dfGS= dfGS[dfGS$segmentationCLA!="Raw",]
dfRG= dfRG[dfRG$segmentationCLA!="Raw",]
getwd()
setwd("~/Git_repos/BEATS/experiments_BEATS")
setwd("~/Git_repos/BEATS/experiments_BEATS")
library(ggplot2)
library(cowplot)
library(gridExtra)
library(grid)
grid_arrange_shared_legend <- function(..., nrow = 1, ncol = length(list(...)), position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position = "none"))
gl <- c(gl, nrow = nrow, ncol = ncol)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
source("arrowHeads_results.R")
source("gasSensors_results.R")
source("randomGenerator_results.R")
dfAH= dfAH[dfAH$segmentationCLA!="Raw",]
dfGS= dfGS[dfGS$segmentationCLA!="Raw",]
dfRG= dfRG[dfRG$segmentationCLA!="Raw",]
setwd("~/Git_repos/BEATS/experiments_BEATS")
library(ggplot2)
library(cowplot)
library(gridExtra)
library(grid)
grid_arrange_shared_legend <- function(..., nrow = 1, ncol = length(list(...)), position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position = "none"))
gl <- c(gl, nrow = nrow, ncol = ncol)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
source("arrowHeads_results.R")
source("gasSensors_results.R")
source("randomGenerator_results.R")
dfAH= dfAH[dfAH$segmentationCLA!="Raw",]
dfGS= dfGS[dfGS$segmentationCLA!="Raw",]
dfGS= dfGS[dfGS$segmentationCLA!="Raw",]
source("gasSensors_results.R")
source("randomGenerator_results.R")
dfAH= dfAH[dfAH$segmentationCLA!="Raw",]
dfGS= dfGS[dfGS$segmentationCLA!="Raw",]
dfRG= dfRG[dfRG$segmentationCLA!="Raw",]
dfClus = dfAH[4:6]
names(dfClus) = c("Input", "Method", "Silhouette")
one = ggplot(dfClus, aes(x=Input, y=Silhouette)) +
geom_line(aes(colour=Method, group=Method, linetype=Method),size=1) +
geom_point(aes(colour=Method, shape = Method),
size=3) + ggtitle("Arrow Heads dataset")  +
# scale_linetype_manual("Method",values=c("hclust"=1,"kmeans"=2)) +
guides(fill = guide_legend(keywidth = 3, keyheight = 3),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
theme(legend.background = element_rect(fill="gray92", size=0.5, linetype=1, colour="black"))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=5)", "SAX (a=6)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=5)")), expression(paste("SAX (",alpha,"=6)"))))
dfClus = dfRG[4:6]
names(dfClus) = c("Input", "Method", "Silhouette")
two = ggplot(dfClus, aes(x=Input, y=Silhouette)) +
geom_line(aes(colour=Method, group=Method, linetype=Method),size=1) +
geom_point(aes(colour=Method, shape = Method),
size=3) + ggtitle("LHS generator dataset")  +
#  scale_linetype_manual("Method",values=c("rf"=1,"svm"=2)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen", "SAX (a=3)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=3)"))))
dfClus = dfGS[4:6]
names(dfClus) = c("Input", "Method", "Silhouette")
three = ggplot(dfClus, aes(x=Input, y=Silhouette)) +
geom_line(aes(colour=Method, group=Method, linetype=Method),size=1) +
geom_point(aes(colour=Method, shape = Method),
size=3) + ggtitle("Gas Sensors dataset")  +
#  scale_linetype_manual("Method",values=c("rf"=1,"svm"=2)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1),
linetype=guide_legend(keywidth = 3, keyheight = 1),
colour=guide_legend(keywidth = 3, keyheight = 1))+
scale_x_discrete(breaks=c("BEATS", "Raw", "Eigen","SAX (a=8)"),
labels=c("BEATS", "Raw", "Eigen", expression(paste("SAX (",alpha,"=8)"))))
pdf(file = "clustering9F.pdf", width = 15.3, height = 3.7)
grid_arrange_shared_legend(one, three, two, nrow = 1, ncol = 3)
dev.off()
grid_arrange_shared_legend(one, three, two, nrow = 1, ncol = 3)
cairo_ps("clustering.eps")
grid_arrange_shared_legend(one, three, two, nrow = 1, ncol = 3)
dev.off()
ggsave("clustering.eps", width = 20, height = 20, units = "cm")
grid_arrange_shared_legend(one, three, two, nrow = 1, ncol = 3)
dev.off()
dev.off()
grid_arrange_shared_legend(one, three, two, nrow = 1, ncol = 3)
ggsave("clustering.eps", width = 20, height = 20, units = "cm")
grid_arrange_shared_legend(one, three, two, nrow = 1, ncol = 3)
dev.off()
0.81-0.46
0.48-0.216
0.48-0.16
